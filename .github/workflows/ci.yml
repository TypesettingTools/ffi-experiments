name: Meson CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      matrix:
        config:
          - {
            name: Windows MSVC,
            os: windows-latest
          }
          - {
            name: "Ubuntu",
            os: ubuntu-latest
          }
          # Disabled due to https://github.com/mesonbuild/meson/issues/8045
          #- {
          #  name: "macOS",
          #  os: macos-latest
          #}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Setup Meson
        run: pip install meson

      - name: Setup MSVC
        if: matrix.config.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          choco install ninja
          $url = "https://github.com/leafo/moonscript/releases/download/win32-v0.5.0/moonscript-187bac54ee5a7450013e9c38e005a0e671b76f45.zip"
          mkdir moonscript
          Invoke-WebRequest -Uri $url -OutFile ".\moonscript\moonscript.zip"
          cd moonscript
          7z e moonscript.zip
          Get-Location | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install dependencies (macOS)
        if: matrix.config.os == 'macos-latest'
        run: |
          brew install luarocks ninja
          luarocks install moonscript

      - name: Install dependencies (Linux)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get install ninja-build build-essential pkg-config luarocks libcurl4-openssl-dev
          sudo luarocks install moonscript

      - name: Configure (Windows, macOS)
        if: matrix.config.os == 'windows-latest' || matrix.config.os == 'macos-latest'
        run: meson build -Ddefault_library=static

      - name: Configure (Linux)
        if: matrix.config.os == 'ubuntu-latest'
        run: meson build

      - name: Build
        run: meson compile -C build

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.name }}
          path: |
            build/bad-mutex/
            build/download-manager/
            build/precise-timer/
            build/requireffi/
